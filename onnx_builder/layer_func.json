{
    "LSTM": {
        "input": [
            "X_i",
            "W_i",
            "R_i",
            "B_i",
            "sequence_lens_i",
            "initial_h_i",
            "initial_c_i",
            "P_i"
        ],
        "output": [
            "Y_o",
            "Y_h_o",
            "Y_c_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Identity": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Abs": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "BatchNormalization": {
        "input": [
            "X_i",
            "scale_i",
            "B_i",
            "mean_i",
            "var_i"
        ],
        "output": [
            "Y_o",
            "mean_o",
            "var_o",
            "saved_mean_o",
            "saved_var_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Mean": {
        "input": [
            "x0_i",
            "x1_i",
            "x2_i",
            "x3_i",
            "x4_i",
            "x5_i",
            "x6_i",
            "x7_i",
            "x8_i",
            "x9_i",
            "x10_i",
            "x11_i",
            "x12_i",
            "x13_i",
            "x14_i",
            "x15_i",
            "x16_i",
            "x17_i",
            "x18_i",
            "x19_i",
            "x20_i",
            "x21_i",
            "x22_i",
            "x23_i",
            "x24_i",
            "x25_i",
            "x26_i",
            "x27_i",
            "x28_i",
            "x29_i",
            "x30_i",
            "x31_i"
        ],
        "output": [
            "mean_o"
        ],
        "python_op": "",
        "shader_op": "mean_o[0] = 1.0f * x0_i[0];"
    },
    "Add": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[out_x + i + j] = B_i[out_x + i + j] + A_i[out_x + i + j];"
    },
    "GlobalMaxPool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Cast": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "AveragePool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "And": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "LRN": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "ArgMax": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "Resize": {
        "input": [
            "X_i",
            "scales_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Expand": {
        "input": [
            "input_i",
            "shape_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Neg": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Mul": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "ArgMin": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "CastMap": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Exp": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Div": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "ReverseSequence": {
        "input": [
            "input_i",
            "sequence_lens_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * input_i[0];"
    },
    "Ceil": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "DepthToSpace": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Clip": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "RNN": {
        "input": [
            "X_i",
            "W_i",
            "R_i",
            "B_i",
            "sequence_lens_i",
            "initial_h_i"
        ],
        "output": [
            "Y_o",
            "Y_h_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Concat": {
        "input": [
            "x0_i",
            "x1_i",
            "x2_i",
            "x3_i",
            "x4_i",
            "x5_i",
            "x6_i",
            "x7_i",
            "x8_i",
            "x9_i",
            "x10_i",
            "x11_i",
            "x12_i",
            "x13_i",
            "x14_i",
            "x15_i",
            "x16_i",
            "x17_i",
            "x18_i",
            "x19_i",
            "x20_i",
            "x21_i",
            "x22_i",
            "x23_i",
            "x24_i",
            "x25_i",
            "x26_i",
            "x27_i",
            "x28_i",
            "x29_i",
            "x30_i",
            "x31_i"
        ],
        "output": [
            "concat_result_o"
        ],
        "python_op": "",
        "shader_op": "concat_result_o[0] = 1.0f * x0_i[0];"
    },
    "Constant": {
        "input": [],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * output_o[0];"
    },
    "LpPool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Conv": {
        "input": [
            "X_i",
            "W_i",
            "B_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Not": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Gather": {
        "input": [
            "data_i",
            "indices_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * data_i[0];"
    },
    "ConvTranspose": {
        "input": [
            "X_i",
            "W_i",
            "B_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Dropout": {
        "input": [
            "data_i"
        ],
        "output": [
            "output_o",
            "mask_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * data_i[0];"
    },
    "LeakyRelu": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Elu": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "GlobalAveragePool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Gemm": {
        "input": [
            "A_i",
            "B_i",
            "C_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * A_i[0];"
    },
    "MaxPool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o",
            "Indices_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Equal": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "Tile": {
        "input": [
            "input_i",
            "repeats_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Flatten": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Floor": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "GRU": {
        "input": [
            "X_i",
            "W_i",
            "R_i",
            "B_i",
            "sequence_lens_i",
            "initial_h_i"
        ],
        "output": [
            "Y_o",
            "Y_h_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "GlobalLpPool": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Greater": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "HardSigmoid": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Selu": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Hardmax": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "If": {
        "input": [
            "cond_i"
        ],
        "output": [],
        "python_op": "",
        "shader_op": "cond_i[0] = 1.0f * cond_i[0];"
    },
    "Min": {
        "input": [],
        "output": [
            "min_o"
        ],
        "python_op": "",
        "shader_op": "min_o[0] = 1.0f * min_o[0];"
    },
    "InstanceNormalization": {
        "input": [
            "input_i",
            "scale_i",
            "B_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Less": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "EyeLike": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "RandomNormal": {
        "input": [],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * output_o[0];"
    },
    "Slice": {
        "input": [
            "data_i",
            "starts_i",
            "ends_i",
            "axes_i",
            "steps_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * data_i[0];"
    },
    "PRelu": {
        "input": [
            "X_i",
            "slope_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Log": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "LogSoftmax": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Loop": {
        "input": [
            "M_i",
            "cond_i"
        ],
        "output": [],
        "python_op": "",
        "shader_op": "M_i[0] = 1.0f * M_i[0];"
    },
    "LpNormalization": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "MatMul": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * A_i[0];"
    },
    "ReduceL2": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "Max": {
        "input": [],
        "output": [
            "max_o"
        ],
        "python_op": "",
        "shader_op": "max_o[0] = 1.0f * max_o[0];"
    },
    "MaxRoiPool": {
        "input": [
            "X_i",
            "rois_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Or": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "Pad": {
        "input": [
            "data_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * data_i[0];"
    },
    "RandomUniformLike": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Reciprocal": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Pow": {
        "input": [
            "X_i",
            "Y_i"
        ],
        "output": [
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Z_o[0] = 1.0f * X_i[0];"
    },
    "RandomNormalLike": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "OneHot": {
        "input": [
            "indices_i",
            "depth_i",
            "values_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * indices_i[0];"
    },
    "RandomUniform": {
        "input": [],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * output_o[0];"
    },
    "ReduceL1": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceLogSum": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceLogSumExp": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceMax": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "OneHotEncoder": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "IsNaN": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "ReduceMean": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceMin": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "TreeEnsembleRegressor": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "ReduceProd": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceSum": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "ReduceSumSquare": {
        "input": [
            "data_i"
        ],
        "output": [
            "reduced_o"
        ],
        "python_op": "",
        "shader_op": "reduced_o[0] = 1.0f * data_i[0];"
    },
    "Relu": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Reshape": {
        "input": [
            "data_i",
            "shape_i"
        ],
        "output": [
            "reshaped_o"
        ],
        "python_op": "",
        "shader_op": "reshaped_o[0] = 1.0f * data_i[0];"
    },
    "Shape": {
        "input": [
            "data_i"
        ],
        "output": [
            "shape_o"
        ],
        "python_op": "",
        "shader_op": "shape_o[0] = 1.0f * data_i[0];"
    },
    "Sigmoid": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Size": {
        "input": [
            "data_i"
        ],
        "output": [
            "size_o"
        ],
        "python_op": "",
        "shader_op": "size_o[0] = 1.0f * data_i[0];"
    },
    "Softmax": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Softplus": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Softsign": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "SpaceToDepth": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "TfIdfVectorizer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Split": {
        "input": [
            "input_i"
        ],
        "output": [],
        "python_op": "",
        "shader_op": "input_i[0] = 1.0f * input_i[0];"
    },
    "Imputer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Sqrt": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Squeeze": {
        "input": [
            "data_i"
        ],
        "output": [
            "squeezed_o"
        ],
        "python_op": "",
        "shader_op": "squeezed_o[0] = 1.0f * data_i[0];"
    },
    "TopK": {
        "input": [
            "X_i",
            "K_i"
        ],
        "output": [
            "Values_o",
            "Indices_o"
        ],
        "python_op": "",
        "shader_op": "Values_o[0] = 1.0f * X_i[0];"
    },
    "Sub": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "Sum": {
        "input": [
            "x0_i",
            "x1_i",
            "x2_i",
            "x3_i",
            "x4_i",
            "x5_i",
            "x6_i",
            "x7_i",
            "x8_i",
            "x9_i",
            "x10_i",
            "x11_i",
            "x12_i",
            "x13_i",
            "x14_i",
            "x15_i",
            "x16_i",
            "x17_i",
            "x18_i",
            "x19_i",
            "x20_i",
            "x21_i",
            "x22_i",
            "x23_i",
            "x24_i",
            "x25_i",
            "x26_i",
            "x27_i",
            "x28_i",
            "x29_i",
            "x30_i",
            "x31_i"
        ],
        "output": [
            "sum_o"
        ],
        "python_op": "",
        "shader_op": "sum_o[0] = 1.0f * x0_i[0];"
    },
    "Shrink": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Tanh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Transpose": {
        "input": [
            "data_i"
        ],
        "output": [
            "transposed_o"
        ],
        "python_op": "",
        "shader_op": "transposed_o[0] = 1.0f * data_i[0];"
    },
    "Unsqueeze": {
        "input": [
            "data_i"
        ],
        "output": [
            "expanded_o"
        ],
        "python_op": "",
        "shader_op": "expanded_o[0] = 1.0f * data_i[0];"
    },
    "Upsample": {
        "input": [
            "X_i",
            "scales_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "SVMClassifier": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o",
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Xor": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "Acos": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Asin": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Atan": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Cos": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Sin": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Tan": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Multinomial": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Scan": {
        "input": [
            "x0_i",
            "x1_i",
            "x2_i",
            "x3_i",
            "x4_i",
            "x5_i",
            "x6_i",
            "x7_i",
            "x8_i",
            "x9_i",
            "x10_i",
            "x11_i",
            "x12_i",
            "x13_i",
            "x14_i",
            "x15_i",
            "x16_i",
            "x17_i",
            "x18_i",
            "x19_i",
            "x20_i",
            "x21_i",
            "x22_i",
            "x23_i",
            "x24_i",
            "x25_i",
            "x26_i",
            "x27_i",
            "x28_i",
            "x29_i",
            "x30_i",
            "x31_i"
        ],
        "output": [
            "y0_o",
            "y1_o",
            "y2_o",
            "y3_o",
            "y4_o",
            "y5_o",
            "y6_o",
            "y7_o",
            "y8_o",
            "y9_o",
            "y10_o",
            "y11_o",
            "y12_o",
            "y13_o",
            "y14_o",
            "y15_o",
            "y16_o",
            "y17_o",
            "y18_o",
            "y19_o",
            "y20_o",
            "y21_o",
            "y22_o",
            "y23_o",
            "y24_o",
            "y25_o",
            "y26_o",
            "y27_o",
            "y28_o",
            "y29_o",
            "y30_o",
            "y31_o"
        ],
        "python_op": "",
        "shader_op": "y0_o[0] = 1.0f * x0_i[0];"
    },
    "Compress": {
        "input": [
            "input_i",
            "condition_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "ConstantOfShape": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "MaxUnpool": {
        "input": [
            "X_i",
            "I_i",
            "output_shape_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * X_i[0];"
    },
    "Scatter": {
        "input": [
            "data_i",
            "indices_i",
            "updates_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * data_i[0];"
    },
    "Sinh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Cosh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Asinh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Acosh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "NonMaxSuppression": {
        "input": [
            "boxes_i",
            "scores_i",
            "max_output_boxes_per_class_i",
            "iou_threshold_i",
            "score_threshold_i"
        ],
        "output": [
            "selected_indices_o"
        ],
        "python_op": "",
        "shader_op": "selected_indices_o[0] = 1.0f * boxes_i[0];"
    },
    "Atanh": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Sign": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Erf": {
        "input": [
            "input_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * input_i[0];"
    },
    "Where": {
        "input": [
            "condition_i",
            "X_i",
            "Y_i"
        ],
        "output": [
            "output_o"
        ],
        "python_op": "",
        "shader_op": "output_o[0] = 1.0f * condition_i[0];"
    },
    "NonZero": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "MeanVarianceNormalization": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "StringNormalizer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Mod": {
        "input": [
            "A_i",
            "B_i"
        ],
        "output": [
            "C_o"
        ],
        "python_op": "",
        "shader_op": "C_o[0] = 1.0f * A_i[0];"
    },
    "ThresholdedRelu": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "MatMulInteger": {
        "input": [
            "A_i",
            "B_i",
            "a_zero_point_i",
            "b_zero_point_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * A_i[0];"
    },
    "QLinearMatMul": {
        "input": [
            "a_i",
            "a_scale_i",
            "a_zero_point_i",
            "b_i",
            "b_scale_i",
            "b_zero_point_i",
            "y_scale_i",
            "y_zero_point_i"
        ],
        "output": [
            "y_o"
        ],
        "python_op": "",
        "shader_op": "y_o[0] = 1.0f * a_i[0];"
    },
    "ConvInteger": {
        "input": [
            "x_i",
            "w_i",
            "x_zero_point_i",
            "w_zero_point_i"
        ],
        "output": [
            "y_o"
        ],
        "python_op": "",
        "shader_op": "y_o[0] = 1.0f * x_i[0];"
    },
    "QLinearConv": {
        "input": [
            "x_i",
            "x_scale_i",
            "x_zero_point_i",
            "w_i",
            "w_scale_i",
            "w_zero_point_i",
            "y_scale_i",
            "y_zero_point_i",
            "B_i"
        ],
        "output": [
            "y_o"
        ],
        "python_op": "",
        "shader_op": "y_o[0] = 1.0f * x_i[0];"
    },
    "QuantizeLinear": {
        "input": [
            "x_i",
            "y_scale_i",
            "y_zero_point_i"
        ],
        "output": [
            "y_o"
        ],
        "python_op": "",
        "shader_op": "y_o[0] = 1.0f * x_i[0];"
    },
    "DequantizeLinear": {
        "input": [
            "x_i",
            "x_scale_i",
            "x_zero_point_i"
        ],
        "output": [
            "y_o"
        ],
        "python_op": "",
        "shader_op": "y_o[0] = 1.0f * x_i[0];"
    },
    "IsInf": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "RoiAlign": {
        "input": [
            "X_i",
            "rois_i",
            "batch_indices_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "ArrayFeatureExtractor": {
        "input": [
            "X_i",
            "Y_i"
        ],
        "output": [
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Z_o[0] = 1.0f * X_i[0];"
    },
    "Binarizer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "CategoryMapper": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "DictVectorizer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "FeatureVectorizer": {
        "input": [],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * Y_o[0];"
    },
    "LabelEncoder": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "LinearClassifier": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o",
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "LinearRegressor": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Normalizer": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "SVMRegressor": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "Scaler": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "TreeEnsembleClassifier": {
        "input": [
            "X_i"
        ],
        "output": [
            "Y_o",
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Y_o[0] = 1.0f * X_i[0];"
    },
    "ZipMap": {
        "input": [
            "X_i"
        ],
        "output": [
            "Z_o"
        ],
        "python_op": "",
        "shader_op": "Z_o[0] = 1.0f * X_i[0];"
    }
}