#version 450
#define LOCAL_SZ_X 256
layout(push_constant) uniform pushBlock {
    int in_h;
    int in_w;
    int in_d;
    int out_h;
    int out_w;
    int out_d;
    int stride_h;
    int stride_w;
    int stride_d;
    int pad_h;
    int pad_w;
    int pad_d;
    int filter_h;
    int filter_w;
    int filter_d;
    int dilation_h;
    int dilation_w;
    int dilation_d;
    int channels;
    int batch;
    int has_bias;
    int M; \\out_h * out_w * out_d;
    int K; \\filter_h * filter_w * filter_d * in_channel
    int N; \\out_channel
    int basic_shader_batch_idx;
    int basic_shader_partition_idx;
    int basic_shader_partition_size;
} p;

layout(binding = 0) readonly buffer buf1{
    float X[];
};

layout(binding = 1) readonly buffer buf2{
    float w[];
};

layout(binding = 2) readonly buffer buf3{
    float B[];
};

layout(binding = 3) writeonly buffer buf4{
    float W[];
};

layout(local_size_x = LOCAL_SZ_X, local_size_y = 1, local_size_z = 1) in;

void main()
{   
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y) + p.basic_shader_partition_idx * p.basic_shader_partition_size;
    int gz = p.basic_shader_batch_idx;

    if(gx < p.M && gy < p.N) {
        float sum = 0.0f;
        
        int output_z = gx / (p.out_h * p.out_w);
        int tmp = gx - (output_z * p.out_h * p.out_w);
        int output_y = tmp / p.out_w;
        int output_x = tmp % p.out_w;

        int org_z = output_z * p.stride_d - p.pad_d;
        int org_y = output_y * p.stride_h - p.pad_h;
        int org_x = output_x * p.stride_w - p.pad_w;

        int weight_off = gy * p.K;
        int input_off = gz * p.in_h * p.in_w * p.channels + (org_y * p.in_w + org_x);


        for(int c = 0; c < p.channels; c++){
            for(int z = 0; z < p.filter_d; z++){  
                for(int y = 0; y < p.filter_h; y++){
                    for(int x = 0; x < p.filter_w; x++){
                        if((org_z + z * p.dilation_d >= 0) && (org_z + z * p.dilation_d < p.in_d) && (org_y + y * p.dilation_h >= 0) && (org_y + y * p.dilation_h < p.in_h) && (org_x + x * p.dilation_w >= 0) && (org_x + x * p.dilation_w < p.in_w)){
                            sum += X[input_off + x * p.dilation_w] * W[weight_off + x];
                        }
                    }
                    input_off += p.in_w * p.dilation_h;
                    weight_off += p.filter_w;
                }
                input_off += p.in_h * p.in_w - p.in_w * p.filter_h * p.dilation_h;
                weight_off += p.filter_w * p.filter_h;
            }
            input_off += p.in_h * p.in_w * p.in_d - p.in_w * p.filter_d * p.dilation_d;
        }
        int offset = gz * p.M * p.N + gx  + gy * p.M;
        if (p.has_bias == 1)
            sum += B[gy];
        Y[offset] = sum;
    }

}