
#version 450
#define LOCAL_SZ_X 256
layout(push_constant) uniform pushBlock {
	int in_w;
    int out_w;
    int stride_w;
    int pad_w;
    int filter_w;
    int dilation_w;
    int channels;
    int batch;
    int has_bias;
    int K; \\filter_width * in_channel
    int N; \\out_channel
    int basic_shader_batch_idx;
    int basic_shader_partition_idx;
    int basic_shader_partition_size;
} p;

layout(binding = 0) readonly buffer buf1{
    float X[];
};

layout(binding = 1) readonly buffer buf2{
    float w[];
};

layout(binding = 2) readonly buffer buf3{
    float B[];
};

layout(binding = 3) writeonly buffer buf4{
    float W[];
};

layout(local_size_x = LOCAL_SZ_X, local_size_y = 1, local_size_z = 1) in;

void main()
{	
	int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y) + p.basic_shader_partition_idx * p.basic_shader_partition_size;
    int gz = p.basic_shader_batch_idx;

	if(gx < p.out_w && gy < p.N) {
        float sum = 0.0f;

        int output_x = gx % p.out_w;
        int org_x = output_x * p.stride_w - p.pad_w;

        int weight_off = gy * p.K;
        int input_off = gz *  p.in_w * p.channels + org_x);


        for(int c = 0; c < p.channels; c++){
            for(int x = 0; x < p.filter_w; x++){
                if((org_x + x * p.dilation_w >= 0) && (org_x + x * p.dilation_w < p.in_w)){
                    sum += X[input_off + x * p.dilation_w] * W[weight_off + x];
                }
            }
            input_off += p.in_w;
            weight_off += p.filter_w;
        }
   		
    }	
    int offset = gz * p.out_w * p.N + gx  + gy * p.out_w;
    if (p.has_bias == 1)
        sum += B[gy];
    Y[offset] = sum;
}

