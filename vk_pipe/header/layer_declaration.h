// Layer Declaration header
//
// This file is auto-generated by cmake, don't edit it.

#include "absval.h"
#include "vulkan/absval_vulkan.h"
namespace ncnn {
class AbsVal_final : virtual public AbsVal, virtual public AbsVal_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = AbsVal::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = AbsVal_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = AbsVal_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = AbsVal::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(AbsVal_final)
} // namespace ncnn

#include "batchnorm.h"
#include "vulkan/batchnorm_vulkan.h"
namespace ncnn {
class BatchNorm_final : virtual public BatchNorm, virtual public BatchNorm_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BatchNorm::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = BatchNorm_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = BatchNorm_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BatchNorm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BatchNorm_final)
} // namespace ncnn

#include "bias.h"
namespace ncnn {
class Bias_final : virtual public Bias
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Bias::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Bias::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Bias_final)
} // namespace ncnn

#include "bnll.h"
namespace ncnn {
class BNLL_final : virtual public BNLL
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BNLL::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = BNLL::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BNLL_final)
} // namespace ncnn

#include "concat.h"
#include "vulkan/concat_vulkan.h"
namespace ncnn {
class Concat_final : virtual public Concat, virtual public Concat_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Concat::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Concat_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Concat_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Concat::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Concat_final)
} // namespace ncnn

#include "convolution.h"
#include "vulkan/convolution_vulkan.h"
namespace ncnn {
class Convolution_final : virtual public Convolution, virtual public Convolution_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Convolution::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Convolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Convolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Convolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Convolution_final)
} // namespace ncnn

#include "crop.h"
#include "vulkan/crop_vulkan.h"
namespace ncnn {
class Crop_final : virtual public Crop, virtual public Crop_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Crop::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Crop_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Crop_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Crop::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Crop_final)
} // namespace ncnn

#include "deconvolution.h"
#include "vulkan/deconvolution_vulkan.h"
namespace ncnn {
class Deconvolution_final : virtual public Deconvolution, virtual public Deconvolution_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Deconvolution::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Deconvolution_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Deconvolution_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Deconvolution::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Deconvolution_final)
} // namespace ncnn

#include "dropout.h"
#include "vulkan/dropout_vulkan.h"
namespace ncnn {
class Dropout_final : virtual public Dropout, virtual public Dropout_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dropout::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Dropout_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Dropout_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Dropout::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dropout_final)
} // namespace ncnn

#include "eltwise.h"
#include "vulkan/eltwise_vulkan.h"
namespace ncnn {
class Eltwise_final : virtual public Eltwise, virtual public Eltwise_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Eltwise::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Eltwise_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Eltwise_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Eltwise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Eltwise_final)
} // namespace ncnn

#include "elu.h"
namespace ncnn {
class ELU_final : virtual public ELU
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ELU::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ELU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ELU_final)
} // namespace ncnn

#include "embed.h"
namespace ncnn {
class Embed_final : virtual public Embed
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Embed::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Embed::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Embed_final)
} // namespace ncnn

#include "exp.h"
namespace ncnn {
class Exp_final : virtual public Exp
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Exp::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Exp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Exp_final)
} // namespace ncnn

#include "flatten.h"
#include "vulkan/flatten_vulkan.h"
namespace ncnn {
class Flatten_final : virtual public Flatten, virtual public Flatten_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Flatten::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Flatten_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Flatten_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Flatten::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Flatten_final)
} // namespace ncnn

#include "innerproduct.h"
#include "vulkan/innerproduct_vulkan.h"
namespace ncnn {
class InnerProduct_final : virtual public InnerProduct, virtual public InnerProduct_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InnerProduct::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = InnerProduct_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = InnerProduct_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = InnerProduct::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InnerProduct_final)
} // namespace ncnn

#include "input.h"
namespace ncnn {
class Input_final : virtual public Input
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Input::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Input::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Input_final)
} // namespace ncnn

#include "log.h"
namespace ncnn {
class Log_final : virtual public Log
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Log::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Log::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Log_final)
} // namespace ncnn

#include "lrn.h"
#include "vulkan/lrn_vulkan.h"
namespace ncnn {
class LRN_final : virtual public LRN, virtual public LRN_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = LRN::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = LRN_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = LRN_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = LRN::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(LRN_final)
} // namespace ncnn

#include "memorydata.h"
namespace ncnn {
class MemoryData_final : virtual public MemoryData
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MemoryData::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MemoryData::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MemoryData_final)
} // namespace ncnn

#include "mvn.h"
namespace ncnn {
class MVN_final : virtual public MVN
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = MVN::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = MVN::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(MVN_final)
} // namespace ncnn

#include "pooling.h"
#include "vulkan/pooling_vulkan.h"
namespace ncnn {
class Pooling_final : virtual public Pooling, virtual public Pooling_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Pooling::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Pooling_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Pooling_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Pooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Pooling_final)
} // namespace ncnn

#include "power.h"
namespace ncnn {
class Power_final : virtual public Power
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Power::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Power::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Power_final)
} // namespace ncnn

#include "prelu.h"
#include "vulkan/prelu_vulkan.h"
namespace ncnn {
class PReLU_final : virtual public PReLU, virtual public PReLU_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PReLU::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = PReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = PReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = PReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PReLU_final)
} // namespace ncnn

#include "proposal.h"
namespace ncnn {
class Proposal_final : virtual public Proposal
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Proposal::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Proposal::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Proposal_final)
} // namespace ncnn

#include "reduction.h"
namespace ncnn {
class Reduction_final : virtual public Reduction
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reduction::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Reduction::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reduction_final)
} // namespace ncnn

#include "relu.h"
#include "vulkan/relu_vulkan.h"
namespace ncnn {
class ReLU_final : virtual public ReLU, virtual public ReLU_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ReLU::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = ReLU_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = ReLU_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ReLU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ReLU_final)
} // namespace ncnn

#include "reshape.h"
#include "vulkan/reshape_vulkan.h"
namespace ncnn {
class Reshape_final : virtual public Reshape, virtual public Reshape_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reshape::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Reshape_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Reshape_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reshape::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reshape_final)
} // namespace ncnn

#include "roipooling.h"
namespace ncnn {
class ROIPooling_final : virtual public ROIPooling
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ROIPooling::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ROIPooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ROIPooling_final)
} // namespace ncnn

#include "scale.h"
#include "vulkan/scale_vulkan.h"
namespace ncnn {
class Scale_final : virtual public Scale, virtual public Scale_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Scale::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Scale_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Scale_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Scale::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Scale_final)
} // namespace ncnn

#include "sigmoid.h"
#include "vulkan/sigmoid_vulkan.h"
namespace ncnn {
class Sigmoid_final : virtual public Sigmoid, virtual public Sigmoid_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Sigmoid::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Sigmoid_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Sigmoid_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Sigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Sigmoid_final)
} // namespace ncnn

#include "slice.h"
namespace ncnn {
class Slice_final : virtual public Slice
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Slice::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Slice::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Slice_final)
} // namespace ncnn

#include "softmax.h"
#include "vulkan/softmax_vulkan.h"
namespace ncnn {
class Softmax_final : virtual public Softmax, virtual public Softmax_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Softmax::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Softmax_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Softmax_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Softmax::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Softmax_final)
} // namespace ncnn

#include "split.h"
namespace ncnn {
class Split_final : virtual public Split
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Split::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Split::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Split_final)
} // namespace ncnn

#include "tanh.h"
#include "vulkan/tanh_vulkan.h"
namespace ncnn {
class TanH_final : virtual public TanH, virtual public TanH_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = TanH::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = TanH_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = TanH_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = TanH::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(TanH_final)
} // namespace ncnn

#include "threshold.h"
namespace ncnn {
class Threshold_final : virtual public Threshold
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Threshold::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Threshold::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Threshold_final)
} // namespace ncnn

#include "binaryop.h"
#include "vulkan/binaryop_vulkan.h"
namespace ncnn {
class BinaryOp_final : virtual public BinaryOp, virtual public BinaryOp_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = BinaryOp::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = BinaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = BinaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = BinaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(BinaryOp_final)
} // namespace ncnn

#include "unaryop.h"
#include "vulkan/unaryop_vulkan.h"
namespace ncnn {
class UnaryOp_final : virtual public UnaryOp, virtual public UnaryOp_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = UnaryOp::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = UnaryOp_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = UnaryOp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = UnaryOp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(UnaryOp_final)
} // namespace ncnn

#include "convolutiondepthwise.h"
#include "vulkan/convolutiondepthwise_vulkan.h"
namespace ncnn {
class ConvolutionDepthWise_final : virtual public ConvolutionDepthWise, virtual public ConvolutionDepthWise_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ConvolutionDepthWise::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = ConvolutionDepthWise_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = ConvolutionDepthWise_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ConvolutionDepthWise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ConvolutionDepthWise_final)
} // namespace ncnn

#include "padding.h"
#include "vulkan/padding_vulkan.h"
namespace ncnn {
class Padding_final : virtual public Padding, virtual public Padding_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Padding::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Padding_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Padding_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Padding::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Padding_final)
} // namespace ncnn

#include "squeeze.h"
namespace ncnn {
class Squeeze_final : virtual public Squeeze
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Squeeze::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Squeeze::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Squeeze_final)
} // namespace ncnn

#include "expanddims.h"
namespace ncnn {
class ExpandDims_final : virtual public ExpandDims
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ExpandDims::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = ExpandDims::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ExpandDims_final)
} // namespace ncnn

#include "normalize.h"
namespace ncnn {
class Normalize_final : virtual public Normalize
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Normalize::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Normalize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Normalize_final)
} // namespace ncnn

#include "permute.h"
#include "vulkan/permute_vulkan.h"
namespace ncnn {
class Permute_final : virtual public Permute, virtual public Permute_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Permute::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Permute_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Permute_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Permute::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Permute_final)
} // namespace ncnn

#include "priorbox.h"
#include "vulkan/priorbox_vulkan.h"
namespace ncnn {
class PriorBox_final : virtual public PriorBox, virtual public PriorBox_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PriorBox::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = PriorBox_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = PriorBox_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = PriorBox::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PriorBox_final)
} // namespace ncnn

#include "detectionoutput.h"
namespace ncnn {
class DetectionOutput_final : virtual public DetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = DetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = DetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(DetectionOutput_final)
} // namespace ncnn

#include "interp.h"
#include "vulkan/interp_vulkan.h"
namespace ncnn {
class Interp_final : virtual public Interp, virtual public Interp_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Interp::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Interp_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Interp_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Interp::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Interp_final)
} // namespace ncnn

#include "deconvolutiondepthwise.h"
#include "vulkan/deconvolutiondepthwise_vulkan.h"
namespace ncnn {
class DeconvolutionDepthWise_final : virtual public DeconvolutionDepthWise, virtual public DeconvolutionDepthWise_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = DeconvolutionDepthWise::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = DeconvolutionDepthWise_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = DeconvolutionDepthWise_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = DeconvolutionDepthWise::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(DeconvolutionDepthWise_final)
} // namespace ncnn

#include "shufflechannel.h"
#include "vulkan/shufflechannel_vulkan.h"
namespace ncnn {
class ShuffleChannel_final : virtual public ShuffleChannel, virtual public ShuffleChannel_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = ShuffleChannel::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = ShuffleChannel_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = ShuffleChannel_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = ShuffleChannel::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(ShuffleChannel_final)
} // namespace ncnn

#include "instancenorm.h"
namespace ncnn {
class InstanceNorm_final : virtual public InstanceNorm
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = InstanceNorm::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = InstanceNorm::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(InstanceNorm_final)
} // namespace ncnn

#include "clip.h"
#include "vulkan/clip_vulkan.h"
namespace ncnn {
class Clip_final : virtual public Clip, virtual public Clip_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Clip::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Clip_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Clip_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Clip::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Clip_final)
} // namespace ncnn

#include "reorg.h"
#include "vulkan/reorg_vulkan.h"
namespace ncnn {
class Reorg_final : virtual public Reorg, virtual public Reorg_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Reorg::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Reorg_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Reorg_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Reorg::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Reorg_final)
} // namespace ncnn

#include "yolodetectionoutput.h"
namespace ncnn {
class YoloDetectionOutput_final : virtual public YoloDetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = YoloDetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = YoloDetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(YoloDetectionOutput_final)
} // namespace ncnn

#include "quantize.h"
namespace ncnn {
class Quantize_final : virtual public Quantize
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Quantize::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Quantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Quantize_final)
} // namespace ncnn

#include "dequantize.h"
namespace ncnn {
class Dequantize_final : virtual public Dequantize
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Dequantize::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Dequantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Dequantize_final)
} // namespace ncnn

#include "yolov3detectionoutput.h"
namespace ncnn {
class Yolov3DetectionOutput_final : virtual public Yolov3DetectionOutput
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Yolov3DetectionOutput::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Yolov3DetectionOutput::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Yolov3DetectionOutput_final)
} // namespace ncnn

#include "psroipooling.h"
namespace ncnn {
class PSROIPooling_final : virtual public PSROIPooling
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = PSROIPooling::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = PSROIPooling::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(PSROIPooling_final)
} // namespace ncnn

#include "packing.h"
#include "vulkan/packing_vulkan.h"
namespace ncnn {
class Packing_final : virtual public Packing, virtual public Packing_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Packing::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Packing_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Packing_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Packing::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Packing_final)
} // namespace ncnn

#include "requantize.h"
namespace ncnn {
class Requantize_final : virtual public Requantize
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Requantize::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = Requantize::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Requantize_final)
} // namespace ncnn

#include "cast.h"
#include "vulkan/cast_vulkan.h"
namespace ncnn {
class Cast_final : virtual public Cast, virtual public Cast_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = Cast::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = Cast_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = Cast_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = Cast::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(Cast_final)
} // namespace ncnn

#include "hardsigmoid.h"
#include "vulkan/hardsigmoid_vulkan.h"
namespace ncnn {
class HardSigmoid_final : virtual public HardSigmoid, virtual public HardSigmoid_vulkan
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = HardSigmoid::create_pipeline(opt); if (ret) return ret; }
        if (opt.use_vulkan_compute) { int ret = HardSigmoid_vulkan::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        if (opt.use_vulkan_compute) { int ret = HardSigmoid_vulkan::destroy_pipeline(opt); if (ret) return ret; }
        { int ret = HardSigmoid::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(HardSigmoid_final)
} // namespace ncnn

#include "selu.h"
namespace ncnn {
class SELU_final : virtual public SELU
{
public:
    virtual int create_pipeline(const Option& opt) {
        { int ret = SELU::create_pipeline(opt); if (ret) return ret; }
        return 0;
    }
    virtual int destroy_pipeline(const Option& opt) {
        { int ret = SELU::destroy_pipeline(opt); if (ret) return ret; }
        return 0;
    }
};
DEFINE_LAYER_CREATOR(SELU_final)
} // namespace ncnn


