#include <map>
#include "layers.h"
namespace backend {
std::map<const char*, Layer> layer_map = {
	{ "LSTM", &LSTM },
	{ "Identity", &Identity },
	{ "Abs", &Abs },
	{ "Add", &Add },
	{ "GlobalMaxPool", &GlobalMaxPool },
	{ "And", &And },
	{ "LRN", &LRN },
	{ "ArgMax", &ArgMax },
	{ "Neg", &Neg },
	{ "Mul", &Mul },
	{ "ArgMin", &ArgMin },
	{ "CastMap", &CastMap },
	{ "Exp", &Exp },
	{ "Div", &Div },
	{ "Ceil", &Ceil },
	{ "DepthToSpace", &DepthToSpace },
	{ "Clip", &Clip },
	{ "RNN", &RNN },
	{ "Concat", &Concat },
	{ "LpPool", &LpPool },
	{ "Conv", &Conv },
	{ "Not", &Not },
	{ "Gather", &Gather },
	{ "ConvTranspose", &ConvTranspose },
	{ "LeakyRelu", &LeakyRelu },
	{ "Elu", &Elu },
	{ "GlobalAveragePool", &GlobalAveragePool },
	{ "Equal", &Equal },
	{ "Tile", &Tile },
	{ "Floor", &Floor },
	{ "GRU", &GRU },
	{ "GlobalLpPool", &GlobalLpPool },
	{ "HardSigmoid", &HardSigmoid },
	{ "Selu", &Selu },
	{ "Hardmax", &Hardmax },
	{ "If", &If },
	{ "InstanceNormalization", &InstanceNormalization },
	{ "RandomNormal", &RandomNormal },
	{ "Log", &Log },
	{ "LogSoftmax", &LogSoftmax },
	{ "Loop", &Loop },
	{ "LpNormalization", &LpNormalization },
	{ "ReduceL2", &ReduceL2 },
	{ "MaxRoiPool", &MaxRoiPool },
	{ "Or", &Or },
	{ "Pad", &Pad },
	{ "RandomUniformLike", &RandomUniformLike },
	{ "Reciprocal", &Reciprocal },
	{ "Pow", &Pow },
	{ "RandomNormalLike", &RandomNormalLike },
	{ "RandomUniform", &RandomUniform },
	{ "ReduceL1", &ReduceL1 },
	{ "ReduceLogSum", &ReduceLogSum },
	{ "ReduceLogSumExp", &ReduceLogSumExp },
	{ "ReduceMax", &ReduceMax },
	{ "OneHotEncoder", &OneHotEncoder },
	{ "ReduceMean", &ReduceMean },
	{ "ReduceMin", &ReduceMin },
	{ "TreeEnsembleRegressor", &TreeEnsembleRegressor },
	{ "ReduceProd", &ReduceProd },
	{ "ReduceSum", &ReduceSum },
	{ "ReduceSumSquare", &ReduceSumSquare },
	{ "Relu", &Relu },
	{ "Reshape", &Reshape },
	{ "Shape", &Shape },
	{ "Sigmoid", &Sigmoid },
	{ "Size", &Size },
	{ "Softmax", &Softmax },
	{ "Softplus", &Softplus },
	{ "Softsign", &Softsign },
	{ "SpaceToDepth", &SpaceToDepth },
	{ "Split", &Split },
	{ "Imputer", &Imputer },
	{ "Sqrt", &Sqrt },
	{ "Squeeze", &Squeeze },
	{ "Sub", &Sub },
	{ "Tanh", &Tanh },
	{ "Transpose", &Transpose },
	{ "Unsqueeze", &Unsqueeze },
	{ "SVMClassifier", &SVMClassifier },
	{ "Xor", &Xor },
	{ "Acos", &Acos },
	{ "Asin", &Asin },
	{ "Atan", &Atan },
	{ "Cos", &Cos },
	{ "Sin", &Sin },
	{ "Tan", &Tan },
	{ "Multinomial", &Multinomial },
	{ "ArrayFeatureExtractor", &ArrayFeatureExtractor },
	{ "Binarizer", &Binarizer },
	{ "CategoryMapper", &CategoryMapper },
	{ "DictVectorizer", &DictVectorizer },
	{ "FeatureVectorizer", &FeatureVectorizer },
	{ "LabelEncoder", &LabelEncoder },
	{ "LinearClassifier", &LinearClassifier },
	{ "LinearRegressor", &LinearRegressor },
	{ "Normalizer", &Normalizer },
	{ "SVMRegressor", &SVMRegressor },
	{ "Scaler", &Scaler },
	{ "TreeEnsembleClassifier", &TreeEnsembleClassifier },
	{ "ZipMap", &ZipMap }
};
}
    