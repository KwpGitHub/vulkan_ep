//TfIdfVectorizer
#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };
layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;  

layout(push_constant) uniform Parameters {      
    
			Shape_t X;
			Shape_t Y;
			int max_gram_length;
			int max_skip_count;
			int min_gram_length;
			int mode;
			int* ngram_counts;
			int* ngram_indexes;
			int* pool_int64s;
			std::vector<std::string> pool_strings;
			float* weights;
} params;


//outputs
layout(std430, binding = 0) buffer lay0 { float Y[]; };

//inputs
layout(std430, binding = 1) buffer lay1 { float X[]; };


void main(){
    const uint id = gl_GlobalInvocationID.x; 
    const uint size = params.input.n * params.input.c * params.input.d * params.input.h * params.input.w;
    if(size <= id){
        return;
    }
   
}
