#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

// set up 3d workgroup


layout(push_constant) uniform Parameters {      
   uint input_masks;
   uint output_mask;
} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float a_i[]; };
layout(std430, binding = 2) buffer lay2 { float a_scale_i[]; };
layout(std430, binding = 3) buffer lay3 { float a_zero_point_i[]; };
layout(std430, binding = 4) buffer lay4 { float b_i[]; };
layout(std430, binding = 5) buffer lay5 { float b_scale_i[]; };
layout(std430, binding = 6) buffer lay6 { float b_zero_point_i[]; };
layout(std430, binding = 7) buffer lay7 { float y_scale_i[]; };
layout(std430, binding = 8) buffer lay8 { float y_zero_point_i[]; };
layout(std430, binding = 9) buffer lay9 { float y_o[]; };


void main(){
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;
    const uint z = gl_GlobalInvocationID.z;

	vec4 a_i_shape = vec4(shape[0].w, shape[0].h, shape[0].d, shape[0].c);
	vec4 a_scale_i_shape = vec4(shape[1].w, shape[1].h, shape[1].d, shape[1].c);
	vec4 a_zero_point_i_shape = vec4(shape[2].w, shape[2].h, shape[2].d, shape[2].c);
	vec4 b_i_shape = vec4(shape[3].w, shape[3].h, shape[3].d, shape[3].c);
	vec4 b_scale_i_shape = vec4(shape[4].w, shape[4].h, shape[4].d, shape[4].c);
	vec4 b_zero_point_i_shape = vec4(shape[5].w, shape[5].h, shape[5].d, shape[5].c);
	vec4 y_scale_i_shape = vec4(shape[6].w, shape[6].h, shape[6].d, shape[6].c);
	vec4 y_zero_point_i_shape = vec4(shape[7].w, shape[7].h, shape[7].d, shape[7].c);
	vec4 y_o_shape = vec4(shape[8].w, shape[8].h, shape[8].d, shape[8].c);
   
    uint _dim  = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z * y_o_shape.w * shape[0].n);
    uint n_dim = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z * y_o_shape.w);
    uint c_dim = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z);
    uint d_dim = uint(y_o_shape.x * y_o_shape.y);
    uint h_dim = uint(y_o_shape.x);

    if( y_o_shape.x <= x || y_o_shape.y <= y || y_o_shape.z <= z){
        return;
    }
        
    for(uint i = 0; i < _dim; i += n_dim){
        for(uint j = 0; j < n_dim; j += c_dim){           
            uint indx = i + j + z * d_dim + y * h_dim + x;
            y_o[indx] = a_i[0];
            //y_o[indx] = 1.0f * a_i[indx];
        }
    }
    
}
