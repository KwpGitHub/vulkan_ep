
#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform Parameters {      
    uint size;
    float a;
/*//input
    Shape_t data_i; Shape_t starts_i; Shape_t ends_i;
    Shape_t axes_i; Shape_t steps_i;
 //output
    Shape_t output_o;
    */


} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float data_i[]; };
layout(std430, binding = 2) buffer lay2 { float starts_i[]; };
layout(std430, binding = 3) buffer lay3 { float ends_i[]; };
layout(std430, binding = 4) buffer lay4 { float axes_i[]; };
layout(std430, binding = 5) buffer lay5 { float steps_i[]; };
layout(std430, binding = 6) buffer lay6 { float output_o[]; };

void main(){
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;
    const uint idz = gl_GlobalInvocationID.z;
    ////const uint data_i_size = params.data_i.n * params.data_i.c * params.data_i.d * params.data_i.w * params.data_i.h;
	//const uint starts_i_size = params.starts_i.n * params.starts_i.c * params.starts_i.d * params.starts_i.w * params.starts_i.h;
	//const uint ends_i_size = params.ends_i.n * params.ends_i.c * params.ends_i.d * params.ends_i.w * params.ends_i.h;
    ////const uint axes_i_size = params.axes_i.n * params.axes_i.c * params.axes_i.d * params.axes_i.w * params.axes_i.h;
	//const uint steps_i_size = params.steps_i.n * params.steps_i.c * params.steps_i.d * params.steps_i.w * params.steps_i.h;
    ////const uint output_o_size = params.output_o.n * params.output_o.c * params.output_o.d * params.output_o.w * params.output_o.h;
    //

    //if(5 <= idx) {
    //    return;
    //}
    return;
}
