
#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform Parameters {      
    
			
//input
    Shape_t data_input; Shape_t starts_input; Shape_t ends_input;
    Shape_t axes_input_opt; Shape_t steps_input_opt;
//output
    Shape_t output_output;
    
} params;

layout(std430, binding = 0) buffer lay0 { float data_input[]; };
layout(std430, binding = 1) buffer lay1 { float starts_input[]; };
layout(std430, binding = 2) buffer lay2 { float ends_input[]; };
layout(std430, binding = 3) buffer lay3 { float axes_input_opt[]; };
layout(std430, binding = 4) buffer lay4 { float steps_input_opt[]; };
layout(std430, binding = 5) buffer lay5 { float output_output[]; };

void main(){
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;
    const uint idz = gl_GlobalInvocationID.z;
    
    const uint data_input_size = params.data_input.n * params.data_input.c * params.data_input.d * params.data_input.w * params.data_input.h;
	const uint starts_input_size = params.starts_input.n * params.starts_input.c * params.starts_input.d * params.starts_input.w * params.starts_input.h;
	const uint ends_input_size = params.ends_input.n * params.ends_input.c * params.ends_input.d * params.ends_input.w * params.ends_input.h;
    const uint axes_input_opt_size = params.axes_input_opt.n * params.axes_input_opt.c * params.axes_input_opt.d * params.axes_input_opt.w * params.axes_input_opt.h;
	const uint steps_input_opt_size = params.steps_input_opt.n * params.steps_input_opt.c * params.steps_input_opt.d * params.steps_input_opt.w * params.steps_input_opt.h;
    const uint output_output_size = params.output_output.n * params.output_output.c * params.output_output.d * params.output_output.w * params.output_output.h;
    

    if(size <= idx) {
        return;
    }
   
}
