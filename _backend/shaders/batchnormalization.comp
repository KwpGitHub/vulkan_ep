
#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform Parameters {      
    uint size;
    float a;
/*//input
    Shape_t X_i; Shape_t scale_i; Shape_t B_i; Shape_t mean_i; Shape_t var_i;
    
 //output
    Shape_t Y_o;
    Shape_t mean_o; Shape_t var_o; Shape_t saved_mean_o; Shape_t saved_var_o;*/


} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float X_i[]; };
layout(std430, binding = 2) buffer lay2 { float scale_i[]; };
layout(std430, binding = 3) buffer lay3 { float B_i[]; };
layout(std430, binding = 4) buffer lay4 { float mean_i[]; };
layout(std430, binding = 5) buffer lay5 { float var_i[]; };
layout(std430, binding = 6) buffer lay6 { float Y_o[]; };
layout(std430, binding = 7) buffer lay7 { float mean_o[]; };
layout(std430, binding = 8) buffer lay8 { float var_o[]; };
layout(std430, binding = 9) buffer lay9 { float saved_mean_o[]; };
layout(std430, binding = 10) buffer lay10 { float saved_var_o[]; };

void main(){
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;
    const uint idz = gl_GlobalInvocationID.z;
    ////const uint X_i_size = params.X_i.n * params.X_i.c * params.X_i.d * params.X_i.w * params.X_i.h;
	//const uint scale_i_size = params.scale_i.n * params.scale_i.c * params.scale_i.d * params.scale_i.w * params.scale_i.h;
	//const uint B_i_size = params.B_i.n * params.B_i.c * params.B_i.d * params.B_i.w * params.B_i.h;
	//const uint mean_i_size = params.mean_i.n * params.mean_i.c * params.mean_i.d * params.mean_i.w * params.mean_i.h;
	//const uint var_i_size = params.var_i.n * params.var_i.c * params.var_i.d * params.var_i.w * params.var_i.h;
    //
    ////const uint Y_o_size = params.Y_o.n * params.Y_o.c * params.Y_o.d * params.Y_o.w * params.Y_o.h;
    ////const uint mean_o_size = params.mean_o.n * params.mean_o.c * params.mean_o.d * params.mean_o.w * params.mean_o.h;
	//const uint var_o_size = params.var_o.n * params.var_o.c * params.var_o.d * params.var_o.w * params.var_o.h;
	//const uint saved_mean_o_size = params.saved_mean_o.n * params.saved_mean_o.c * params.saved_mean_o.d * params.saved_mean_o.w * params.saved_mean_o.h;
	//const uint saved_var_o_size = params.saved_var_o.n * params.saved_var_o.c * params.saved_var_o.d * params.saved_var_o.w * params.saved_var_o.h;

    //if(5 <= idx) {
    //    return;
    //}
    return;
}
