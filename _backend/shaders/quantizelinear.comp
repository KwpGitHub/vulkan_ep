#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;
// set up 3d workgroup


layout(push_constant) uniform Parameters {      
   uint input_masks;
   uint output_mask;
} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float x_i[]; };
layout(std430, binding = 2) buffer lay2 { float y_scale_i[]; };
layout(std430, binding = 3) buffer lay3 { float y_zero_point_i[]; };
layout(std430, binding = 4) buffer lay4 { float y_o[]; };


void main(){
    
	 uvec4 x_i_shape = uvec4(shape[0].w, shape[0].h, shape[0].d, shape[0].c);
	 uvec4 y_scale_i_shape = uvec4(shape[1].w, shape[1].h, shape[1].d, shape[1].c);
	 uvec4 y_zero_point_i_shape = uvec4(shape[2].w, shape[2].h, shape[2].d, shape[2].c);
	 uvec4 y_o_shape = uvec4(shape[3].w, shape[3].h, shape[3].d, shape[3].c);
    uint _dim  = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z * y_o_shape.w * shape[0].n);
    uint n_dim = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z * y_o_shape.w);
    uint c_dim = uint(y_o_shape.x * y_o_shape.y * y_o_shape.z);
    uint d_dim = uint(y_o_shape.x * y_o_shape.y);
    uint h_dim = uint(y_o_shape.x);

  
    /*
    for(uint out_x = gl_GlobalInvocationID.x; out_x < y_o_shape.x; out_x += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
    for(uint out_y = gl_GlobalInvocationID.y; out_y < y_o_shape.y; out_y += gl_NumWorkGroups.y * gl_WorkGroupSize.y){
    for(uint out_z = gl_GlobalInvocationID.z; out_z < y_o_shape.z; out_z += gl_NumWorkGroups.z * gl_WorkGroupSize.z){
        
    for(uint i = 0; i < _dim; i += n_dim){
        for(uint j = 0; j < n_dim; j += c_dim){            
            y_o[out_x + out_y*h_dim + out_z*d_dim + i + j] = x_i[0];
            //y_o[indx] = 1.0f * x_i[indx];
        }
    }
    }}}
    */

    for(uint out_x = gl_GlobalInvocationID.x; out_x < c_dim; out_x += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
        for(uint i = 0; i < _dim; i += n_dim){
            for(uint j = 0; j < n_dim; j += c_dim){            
                y_o[out_x + i + j] = x_i[0];
                //y_o[indx] = 1.0f * x_i[indx];
            }
        }
    }    
    
}
