#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;
// set up 3d workgroup


layout(push_constant) uniform Parameters {      
   uint input_masks;
   uint output_mask;
} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float X_i[]; };
layout(std430, binding = 2) buffer lay2 { float W_i[]; };
layout(std430, binding = 3) buffer lay3 { float R_i[]; };
layout(std430, binding = 4) buffer lay4 { float B_i[]; };
layout(std430, binding = 5) buffer lay5 { float sequence_lens_i[]; };
layout(std430, binding = 6) buffer lay6 { float initial_h_i[]; };
layout(std430, binding = 7) buffer lay7 { float initial_c_i[]; };
layout(std430, binding = 8) buffer lay8 { float P_i[]; };
layout(std430, binding = 9) buffer lay9 { float Y_o[]; };
layout(std430, binding = 10) buffer lay10 { float Y_h_o[]; };
layout(std430, binding = 11) buffer lay11 { float Y_c_o[]; };


void main(){
    
	 uvec4 X_i_shape = uvec4(shape[0].w, shape[0].h, shape[0].d, shape[0].c);
	 uvec4 W_i_shape = uvec4(shape[1].w, shape[1].h, shape[1].d, shape[1].c);
	 uvec4 R_i_shape = uvec4(shape[2].w, shape[2].h, shape[2].d, shape[2].c);
	 uvec4 B_i_shape = uvec4(shape[3].w, shape[3].h, shape[3].d, shape[3].c);
	 uvec4 sequence_lens_i_shape = uvec4(shape[4].w, shape[4].h, shape[4].d, shape[4].c);
	 uvec4 initial_h_i_shape = uvec4(shape[5].w, shape[5].h, shape[5].d, shape[5].c);
	 uvec4 initial_c_i_shape = uvec4(shape[6].w, shape[6].h, shape[6].d, shape[6].c);
	 uvec4 P_i_shape = uvec4(shape[7].w, shape[7].h, shape[7].d, shape[7].c);
	 uvec4 Y_o_shape = uvec4(shape[8].w, shape[8].h, shape[8].d, shape[8].c);
	 uvec4 Y_h_o_shape = uvec4(shape[9].w, shape[9].h, shape[9].d, shape[9].c);
	 uvec4 Y_c_o_shape = uvec4(shape[10].w, shape[10].h, shape[10].d, shape[10].c);
    uint _dim  = uint(Y_o_shape.x * Y_o_shape.y * Y_o_shape.z * Y_o_shape.w * shape[0].n);
    uint n_dim = uint(Y_o_shape.x * Y_o_shape.y * Y_o_shape.z * Y_o_shape.w);
    uint c_dim = uint(Y_o_shape.x * Y_o_shape.y * Y_o_shape.z);
    uint d_dim = uint(Y_o_shape.x * Y_o_shape.y);
    uint h_dim = uint(Y_o_shape.x);

  
    /*
    for(uint out_x = gl_GlobalInvocationID.x; out_x < Y_o_shape.x; out_x += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
    for(uint out_y = gl_GlobalInvocationID.y; out_y < Y_o_shape.y; out_y += gl_NumWorkGroups.y * gl_WorkGroupSize.y){
    for(uint out_z = gl_GlobalInvocationID.z; out_z < Y_o_shape.z; out_z += gl_NumWorkGroups.z * gl_WorkGroupSize.z){
        
    for(uint i = 0; i < _dim; i += n_dim){
        for(uint j = 0; j < n_dim; j += c_dim){            
            Y_o[out_x + out_y*h_dim + out_z*d_dim + i + j] = X_i[0];
            //Y_o[indx] = 1.0f * X_i[indx];
        }
    }
    }}}
    */

    for(uint out_x = gl_GlobalInvocationID.x; out_x < c_dim; out_x += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
        for(uint i = 0; i < _dim; i += n_dim){
            for(uint j = 0; j < n_dim; j += c_dim){            
                Y_o[out_x + i + j] = X_i[0];
                //Y_o[indx] = 1.0f * X_i[indx];
            }
        }
    }    
    
}
