
#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform Parameters {      
    float clip; int direction; int hidden_size; int input_forget;
			Shape_t activation_alpha; Shape_t activation_beta; Shape_t activations;
//input
    Shape_t X_input; Shape_t W_input; Shape_t R_input;
    Shape_t B_input_o; Shape_t sequence_lens_input_o; Shape_t initial_h_input_o; Shape_t initial_c_input_o; Shape_t P_input_o;
//output
    
    Shape_t Y_output_o; Shape_t Y_h_output_o; Shape_t Y_c_output_o;
} params;

layout(std430, binding = 0) buffer lay0 { float activation_alpha[]; };
layout(std430, binding = 1) buffer lay1 { float activation_beta[]; };
layout(std430, binding = 2) buffer lay2 { float activations[]; };
layout(std430, binding = 3) buffer lay3 { float X_input[]; };
layout(std430, binding = 4) buffer lay4 { float W_input[]; };
layout(std430, binding = 5) buffer lay5 { float R_input[]; };
layout(std430, binding = 6) buffer lay6 { float B_input_o[]; };
layout(std430, binding = 7) buffer lay7 { float sequence_lens_input_o[]; };
layout(std430, binding = 8) buffer lay8 { float initial_h_input_o[]; };
layout(std430, binding = 9) buffer lay9 { float initial_c_input_o[]; };
layout(std430, binding = 10) buffer lay10 { float P_input_o[]; };
layout(std430, binding = 11) buffer lay11 { float Y_output_o[]; };
layout(std430, binding = 12) buffer lay12 { float Y_h_output_o[]; };
layout(std430, binding = 13) buffer lay13 { float Y_c_output_o[]; };

void main(){
    const uint idx = gl_GlobalInvocationID.x;
    const uint idy = gl_GlobalInvocationID.y;
    const uint idz = gl_GlobalInvocationID.z;
    const uint activation_alpha_size = params.activation_alpha.n * params.activation_alpha.c * params.activation_alpha.d * params.activation_alpha.w * params.activation_alpha.h;
	const uint activation_beta_size = params.activation_beta.n * params.activation_beta.c * params.activation_beta.d * params.activation_beta.w * params.activation_beta.h;
	const uint activations_size = params.activations.n * params.activations.c * params.activations.d * params.activations.w * params.activations.h;
    const uint X_input_size = params.X_input.n * params.X_input.c * params.X_input.d * params.X_input.w * params.X_input.h;
	const uint W_input_size = params.W_input.n * params.W_input.c * params.W_input.d * params.W_input.w * params.W_input.h;
	const uint R_input_size = params.R_input.n * params.R_input.c * params.R_input.d * params.R_input.w * params.R_input.h;
    const uint B_input_o_size = params.B_input_o.n * params.B_input_o.c * params.B_input_o.d * params.B_input_o.w * params.B_input_o.h;
	const uint sequence_lens_input_o_size = params.sequence_lens_input_o.n * params.sequence_lens_input_o.c * params.sequence_lens_input_o.d * params.sequence_lens_input_o.w * params.sequence_lens_input_o.h;
	const uint initial_h_input_o_size = params.initial_h_input_o.n * params.initial_h_input_o.c * params.initial_h_input_o.d * params.initial_h_input_o.w * params.initial_h_input_o.h;
	const uint initial_c_input_o_size = params.initial_c_input_o.n * params.initial_c_input_o.c * params.initial_c_input_o.d * params.initial_c_input_o.w * params.initial_c_input_o.h;
	const uint P_input_o_size = params.P_input_o.n * params.P_input_o.c * params.P_input_o.d * params.P_input_o.w * params.P_input_o.h;
    
    const uint Y_output_o_size = params.Y_output_o.n * params.Y_output_o.c * params.Y_output_o.d * params.Y_output_o.w * params.Y_output_o.h;
	const uint Y_h_output_o_size = params.Y_h_output_o.n * params.Y_h_output_o.c * params.Y_h_output_o.d * params.Y_h_output_o.w * params.Y_h_output_o.h;
	const uint Y_c_output_o_size = params.Y_c_output_o.n * params.Y_c_output_o.c * params.Y_c_output_o.d * params.Y_c_output_o.w * params.Y_c_output_o.h;

    if(size <= idx) {
        return;
    }
   
}
