#version 450
struct Shape_t { uint n; uint c; uint d; uint h; uint w; };

// set up 3d workgroup
layout(local_size_x_id = 0) in;
layout(local_size_y_id = 1) in;
layout(local_size_z_id = 2) in;

layout(push_constant) uniform Parameters {      
   uint input_masks;
   uint output_mask;
} params;

layout(std430, binding = 0) buffer lay0 { Shape_t shape[]; };
layout(std430, binding = 1) buffer lay1 { float A_i[]; };
layout(std430, binding = 2) buffer lay2 { float B_i[]; };
layout(std430, binding = 3) buffer lay3 { float C_o[]; };


void main(){
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y;
    const uint z = gl_GlobalInvocationID.z;

	vec4 A_i_shape = vec4(shape[0].c, shape[0].d, shape[0].h, shape[0].w);
	vec4 B_i_shape = vec4(shape[1].c, shape[1].d, shape[1].h, shape[1].w);
	vec4 C_o_shape = vec4(shape[2].c, shape[2].d, shape[2].h, shape[2].w);

    uint n = shape[0].n;
    
    if( C_o_shape.x <= x || C_o_shape.y <= y || C_o_shape.z <= z){
        return;
    }

    
    for(uint i = 0; i < n; i++){
        for(uint j = 0; j < C_o_shape.w; j++){
            uint indx = x + uint(y*C_o_shape.x) + uint(z*C_o_shape.x*C_o_shape.y) +  uint(j*C_o_shape.x*C_o_shape.y*C_o_shape.z) + uint(i*C_o_shape.x*C_o_shape.y*C_o_shape.z*C_o_shape.w);
            C_o[indx] = 1.0f;
            //C_o[indx] = 1.0f * A_i[indx];           
        }
    }
    
}
